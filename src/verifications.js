const Ressource = require('./_ressource');


/**
 * Represents a Verification Manager responsible for handling verification-related operations.
 * @extends Ressource
 */
class VerificationManager extends Ressource {   
    /**
     * Create a new VerificationManager instance with the specified service ID and secret token.
     *
     * @constructor
     * @param {object} params - The parameters for initializing the VerificationManager.
     * @param {string} params.SERVICE_ID - The service ID associated with verifications.
     * @param {string} params.SECRET_TOKEN - The secret token used for authentication.
     * @extends {Ressource} - Inherits from the Ressource class.
     * @memberof VerificationManager
     */
    constructor({SERVICE_ID, SECRET_TOKEN}) {
        super({SERVICE_ID, SECRET_TOKEN});

        /**
         * The resource URL for verifications associated with the service.
         *
         * @type {string}
         * @readonly
         * @memberof VerificationManager
         */
        this.RESSOURCE_URL = `${this.API_BASE_URL}/verifications`;
    }

    /**
     * Create a new verification request.
     * @async
     * @param {object} body - The verification data to create.
     * @param {string} body.to - The phone number to send the verification code to.
     * @param {string} [body.message] - (Optional) The message to send to the phone number, must contains the <1234> placeholder that will be replaced by the autogenerated code.
     * @param {string} [body.sender_name="SMS 9080"] - (Optional) The sender's name for the message. (Case sensitive)    
     * @param {number} [body.expiry_time] - (Optional) Expiry time for the code given in minutes.
     *   Should be between 5 and 30 (inclusive).
     * @param {number} [body.attempts] - (Optional) Maximum times of attempts before the code to expire.
     *   Should be between 3 and 10 (inclusive).
     * @param {number} [body.code_length=4] - (Optional) The length of the code to be generated.
     *   Should be between 4 and 8 (inclusive).
     * @throws {Error} If the request fails or the server returns an error.
     * @returns {Promise<object>} A promise that resolves with the created verification data.
     * @memberof VerificationManager 
     */
    async create(body) {
        // Validate the given body
        try {
            if(!(body instanceof Object)) {
                throw new Error("The body request has to be an object !");
            }
            const {to, message="Code de v√©rification : <1234>", sender_name="SMS 9080", expiry_time=null, attempts=null, code_length=4} = body;
            return super.create({to, message, sender_name, expiry_time, attempts, code_length});
        } catch (error) {
            throw error;
        }
    }


    /**
     * Verify a verification request using a verification code.
     *
     * @async
     * @param {Object} params - The parameters for the verification.
     * @param {string} params.verificationId - The identifier of the verification request to verify.
     * @param {string} params.code - The verification code to use for verification.
     * @throws {Error} If the request fails, the parameters are invalid, or the server returns an error.
     * @returns {Promise<object>} A promise that resolves with the result of the verification.
     */
    async verify(params) {
        try {
            if(!(params instanceof Object)) {
                throw new Error("The request's params has to be an object !");
            }
            const {verificationId, code} = params;

            return await this.request({
                url: `${this.RESSOURCE_URL}/${params?.verificationId}`,
                method: "PATCH",
                data: { code: params?.code },
            });
        } catch(error) {
            throw error;
        }

    }
}

module.exports = VerificationManager;
